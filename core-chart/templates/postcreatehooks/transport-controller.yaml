{{- if .Values.InstallPCHs }}
{{- $itsName := .Values.ITSName }}
{{- if not $itsName }}
  {{- if .Capabilities.APIVersions.Has "tenancy.kflex.kubestellar.org/v1alpha1" }}
    {{- $controlPlanes := lookup "tenancy.kflex.kubestellar.org/v1alpha1" "ControlPlane" "" "" -}}
    {{- $itsControlPlanes := list -}}
    {{- $itsCount := 0 -}}
    {{- range $controlPlanes.items -}}
      {{- if eq (index .metadata.labels "kflex.kubestellar.io/cptype") "its" -}}
        {{- $itsControlPlanes = append $itsControlPlanes . -}}
        {{- $itsCount = add $itsCount 1 -}}
      {{- end -}}
    {{- end -}}
    {{- if eq $itsCount 1 }}
      {{- $itsName = (index $itsControlPlanes 0).metadata.name }}
    {{- else if gt $itsCount 1 }}
      {{- fail "Multiple ITS control planes found. Please specify ITSName in values." }}
    {{- end }}
  {{- end }}
  {{- if not $itsName }}
    {{- $itsName = "its1" }}
  {{- end }}
{{- end }}
apiVersion: tenancy.kflex.kubestellar.org/v1alpha1
kind: PostCreateHook
metadata:
  name: transport-controller
  labels:
    kflex.kubestellar.io/cptype: wds
spec:
  templates:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: "{{"{{.ControlPlaneName}}-transport-controller"}}"
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "list", "watch", "create", "update", "patch"]
    - apiGroups: ["tenancy.kflex.kubestellar.org"]
      resources: ["controlplanes"]
      verbs: ["get", "list", "watch"]
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: "{{"{{.ControlPlaneName}}"}}-transport-controller"
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: "{{"{{.ControlPlaneName}}"}}-transport-controller"
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: "{{"{{.Namespace}}"}}"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: transport-controller
    spec:
      replicas: 1
      selector:
        matchLabels:
          name: transport-controller
      template:
        metadata:
          labels:
            name: transport-controller
        spec:
          initContainers:
          - name: copy-its-kubeconfig
            image: quay.io/kubestellar/kubectl:{{.Values.KUBECTL_VERSION}}
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
            - -c
            - |
              set -e
              echo "Starting ITS kubeconfig copy process..."
              
              # Wait for ITS control plane to be ready
              ITS_NAME="{{ $itsName }}"
              echo "Looking for ITS control plane: $ITS_NAME"
              
              while true; do
                if kubectl get controlplane "$ITS_NAME" >/dev/null 2>&1; then
                  STATUS=$(kubectl get controlplane "$ITS_NAME" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "")
                  if [ "$STATUS" = "True" ]; then
                    echo "ITS control plane $ITS_NAME is ready"
                    break
                  fi
                fi
                echo "Waiting for ITS control plane '$ITS_NAME' to be ready..."
                sleep 10
              done
              
              # Get ITS secret details
              echo "Getting ITS secret details..."
              SECRET_NAME=$(kubectl get controlplane "$ITS_NAME" -o jsonpath='{.status.secretRef.name}')
              SECRET_NAMESPACE=$(kubectl get controlplane "$ITS_NAME" -o jsonpath='{.status.secretRef.namespace}')
              
              if [ -z "$SECRET_NAME" ] || [ -z "$SECRET_NAMESPACE" ]; then
                echo "ERROR: Could not get secret details from ITS control plane"
                exit 1
              fi
              
              echo "Found secret: $SECRET_NAME in namespace: $SECRET_NAMESPACE"
              
              # Check if secret already exists in target namespace
              if kubectl get secret its-kubeconfig-secret -n "{{"{{.Namespace}}"}}" >/dev/null 2>&1; then
                echo "Secret already exists, deleting it first..."
                kubectl delete secret its-kubeconfig-secret -n "{{"{{.Namespace}}"}}"
              fi
              
              # Copy the secret to current namespace
              echo "Copying secret to namespace: {{"{{.Namespace}}"}}"
              kubectl get secret "$SECRET_NAME" -n "$SECRET_NAMESPACE" -o yaml | \
                sed '/resourceVersion:/d' | \
                sed '/uid:/d' | \
                sed '/creationTimestamp:/d' | \
                sed "s/namespace: $SECRET_NAMESPACE/namespace: {{"{{.Namespace}}"}}/g" | \
                sed "s/name: $SECRET_NAME/name: its-kubeconfig-secret/g" | \
                kubectl apply -f -
              
              echo "ITS kubeconfig secret copied successfully"
          containers:
          - name: transport-controller
            image: ghcr.io/kubestellar/kubestellar/ocm-transport-controller:{{ .Values.TRANSPORT_VERSION | default .Values.KUBESTELLAR_VERSION }}
            imagePullPolicy: IfNotPresent
            args:
            - --metrics-bind-address={{.Values.transport_controller.metrics_bind_addr}}
            - --pprof-bind-address={{.Values.transport_controller.pprof_bind_addr}}
            - --transport-kubeconfig=/mnt/its-secret/kubeconfig
            - --transport-qps={{.Values.transport_controller.transport_qps}}
            - --transport-burst={{.Values.transport_controller.transport_burst}}
            - --wds-kubeconfig=/mnt/wds-secret/kubeconfig
            - --wds-name={{"{{.ControlPlaneName}}"}}
            - --wds-qps={{.Values.transport_controller.wds_qps}}
            - --wds-burst={{.Values.transport_controller.wds_burst}}
            - -v={{.Values.verbosity.transport | default .Values.verbosity.default | default 4 }}
            - --max-num-wrapped={{.Values.transport_controller.max_num_wrapped}}
            - --max-size-wrapped={{.Values.transport_controller.max_size_wrapped}}
            volumeMounts:
            - name: wds-kubeconfig-volume
              mountPath: /mnt/wds-secret
              readOnly: true
            - name: its-kubeconfig-volume
              mountPath: /mnt/its-secret
              readOnly: true
          volumes:
          - name: wds-kubeconfig-volume
            secret:
              secretName: "{{"{{.ControlPlaneName}}"}}"
          - name: its-kubeconfig-volume
            secret:
              secretName: its-kubeconfig-secret
{{- end }}